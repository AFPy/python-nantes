<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python-Nantes</title><link href="http://nantes.afpy.org/" rel="alternate"></link><link href="http://nantes.afpy.org/feeds/comptes-rendus.atom.xml" rel="self"></link><id>http://nantes.afpy.org/</id><updated>2015-11-04T00:00:00+01:00</updated><entry><title>Discussions autour de PyConFR 2015 et relance du meetup</title><link href="http://nantes.afpy.org/discussions-autour-de-pyconfr-2015-et-relance-du-meetup.html" rel="alternate"></link><published>2015-11-04T00:00:00+01:00</published><updated>2015-11-04T00:00:00+01:00</updated><author><name>Arthur Lutz</name></author><id>tag:nantes.afpy.org,2015-11-04:discussions-autour-de-pyconfr-2015-et-relance-du-meetup.html</id><summary type="html">&lt;p&gt;Nous étions une vingtaine à nous réunir pour relancer la dynamiques
des meetup python à Nantes ce 28 octobre 2015 dans les locaux de
&lt;a class="reference external" href="http://www.oasiswork.fr"&gt;Oasiswork&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nous avons parlé de manière informelle des conférences et sujets
abordés lors de la &lt;a class="reference external" href="http://www.pycon.fr/2015/"&gt;PyConFR2015&lt;/a&gt;,
conférence autour du language de programmation python organisée par
l'&lt;a class="reference external" href="http://www.afpy.org"&gt;AFPY&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nous avons parlé et partagé sur de nombreux sujets dont :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ansible, salt et le devops&lt;/li&gt;
&lt;li&gt;bus d'évenements dans salt et dans fedmsg&lt;/li&gt;
&lt;li&gt;scapy&lt;/li&gt;
&lt;li&gt;tox, guix-tox&lt;/li&gt;
&lt;li&gt;l'inevitable docker&lt;/li&gt;
&lt;li&gt;sqlalchemy, l'ORM de django, pyramid, flask&lt;/li&gt;
&lt;li&gt;pelican&lt;/li&gt;
&lt;li&gt;elasticsearch&lt;/li&gt;
&lt;li&gt;micropython et wipy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De nombreux sujets à explorer lors des prochains meetups. En attendant
la publication des vidéos de PyConFR 2015, vous pouvez consulter &lt;a class="reference external" href="http://www.pycon.fr/2015/schedule/"&gt;le
programme de pyconfr 2015&lt;/a&gt; ou
lire &lt;a class="reference external" href="https://www.logilab.org/2337253"&gt;un compte rendu rédigé par Logilab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nous nous sommes mis d'accord pour nous réunir à un rhythme d'une fois
par mois, alternant entre trois formats : les meetups présentation,
les meetups en mode &amp;quot;barcamp&amp;quot; (non-conférence où chacun peut proposer
un sujet avec constitution de petits groupes pour parler ou travailler
sur ce sujet), et le format &lt;em&gt;afpyro&lt;/em&gt; (tout simplement un apéro
communautaire dans un bar). L'organisation des présentations se
coordonne sur &lt;a class="reference external" href="https://lite4.framapad.org/p/aiWGnNwwIb"&gt;le pad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si vous avez des questions ou des remarques concernant nos meetups,
rejoignez-nous sur le chan IRC de l'AFPy Nantes ou inscrivez vous sur
&lt;a class="reference external" href="http://lists.afpy.org/nantes/"&gt;la liste de diffusion&lt;/a&gt; . Vous pouvez
aussi nous suivre sur Twitter via notre compte &lt;a class="reference external" href="http://twitter.com/PythonNantes"&gt;&amp;#64;PythonNantes&lt;/a&gt;.&lt;/p&gt;
</summary><category term="python"></category><category term="nantes"></category><category term="pyconfr"></category></entry><entry><title>Compte-rendu des conférences : Pyramid, Générateurs et co-routines</title><link href="http://nantes.afpy.org/compte-rendu-des-conferences-pyramid-generateurs-et-co-routines.html" rel="alternate"></link><published>2015-01-27T00:00:00+01:00</published><updated>2015-01-27T00:00:00+01:00</updated><author><name>Florent Lebreton</name></author><id>tag:nantes.afpy.org,2015-01-27:compte-rendu-des-conferences-pyramid-generateurs-et-co-routines.html</id><summary type="html">&lt;p&gt;Pour ce premier meetup de janvier, deux sujets ont été présentés devant une quarantaine de personnes visiblement intéressées et attentives. Vous trouverez dans cet article un résumé de ce qui a été proposé, ainsi que les liens vers les présentations.&lt;/p&gt;
&lt;div class="section" id="pyramid"&gt;
&lt;h2&gt;Pyramid&lt;/h2&gt;
&lt;p&gt;Intervenant&amp;nbsp;: Gaël&lt;/p&gt;
&lt;p&gt;Pyramid est un framework web développé en Python. On peut le classer entre Bottle (plus minimaliste) et Django (plus gros et plus monolithique).
Il est nativement WSGI, facilement extensible et laisse beaucoup de souplesse dans les choix techniques et la conception.&lt;/p&gt;
&lt;p&gt;Vous verrez dans les slides qu'un classique &amp;quot;Hello World&amp;quot;, servi en HTTP, est très simple à réaliser.&lt;/p&gt;
&lt;p&gt;Le premier composant à appréhender est le &lt;a class="reference external" href="http://docs.pylonsproject.org/docs/pyramid/en/latest/api/config.html"&gt;configurateur&lt;/a&gt;, qui permet de configurer une application Pyramid (et notamment de gérer les routes).&lt;/p&gt;
&lt;p&gt;Le &lt;em&gt;routeur&lt;/em&gt; a la particularité de pouvoir fonctionner de &lt;a class="reference external" href="http://pyramid-cookbook.readthedocs.org/en/latest/routing/"&gt;deux manière différentes&lt;/a&gt; :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;par mapping des URLs sur des vues&lt;/li&gt;
&lt;li&gt;en mode &lt;em&gt;traversal&lt;/em&gt; (les différents fragments de l'URL permettent traverser des classes).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le routeur permet aussi classiquement de faire de la résolution d'URL, ce qui évite à avoir à répéter des URLs dans les templates par exemple.&lt;/p&gt;
&lt;p&gt;Un autre concept assez intéressant du framework est l'utilisation des exceptions. Il est notamment possible de lever des exceptions HTTP ce qui permet de gérer les erreurs sous forme de codes du protocole HTTP (500, 403).&lt;/p&gt;
&lt;p&gt;Le concept de &lt;em&gt;factory&lt;/em&gt; permet de récupérer/travailler sur un objet avant qu'une vue ne soit invoquée, ce qui rend le code de la vue plus simple. Une &lt;em&gt;factory&lt;/em&gt; peut être factorisée et utilisée dans plusieurs vues.&lt;/p&gt;
&lt;p&gt;Le rendu d'une vue se fait via par l'intermédiaire d'une &lt;em&gt;renderer&lt;/em&gt; et une vue peut être associée à plusieurs renderer (par exemple un rendu json et un rendu HTML via une template). On pourrait aussi avoir plusieurs renderers utilisant des moteurs de templates différents (Chameleon, Jinja, Mako, ...). Il est aussi possible de créer son propre renderer (par exemple pour renvoyer un fichier csv, un pdf, ...).&lt;/p&gt;
&lt;p&gt;Le concept de &lt;em&gt;tween&lt;/em&gt; permet d'intercepter une requête, puis la réponse pour analyser ou modifier l'une ou l'autre. Un cas pratique classique est l'utilisation d'une barre de debuggage permettant d'analyser le comportement de l'application.&lt;/p&gt;
&lt;p&gt;Un système d'évènements permet d'associer une fonction à un évènement. Par exemple : &lt;tt class="docutils literal"&gt;BeforeRender&lt;/tt&gt; est déclenché avant le rendu d'une template et laisse la possibilité d'injecter des données dans le context passé à la template.&lt;/p&gt;
&lt;p&gt;Par ailleurs, Pyramid est modulaire et peut être facilement étendu via la fonction magique &lt;tt class="docutils literal"&gt;includeme&lt;/tt&gt;. Il est aussi possible d'étendre l'objet &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; pour lui ajouter des méthodes par exemple, ce qui peut s'avérer pratique dans certains cas.&lt;/p&gt;
&lt;p&gt;Beaucoup de modules supplémentaires sont fournis nativement :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gestion de l'authentification et d'autorisations&lt;/li&gt;
&lt;li&gt;Gestion et service des fichiers statiques&lt;/li&gt;
&lt;li&gt;Gestion des sessoins&lt;/li&gt;
&lt;li&gt;Gestion du cache HTTP&lt;/li&gt;
&lt;li&gt;Gestion de prédicats de vue&lt;/li&gt;
&lt;li&gt;Gestion de trasaction étendue (par exemple pour éviter un envoi de mail si une requête SQL a précédemment échoué)&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L'écosystème de Pyramid est assez riche et varié ; plus de 250 packages sont indiqués comme étant compatibles Pyramid sur pypi.&lt;/p&gt;
&lt;p&gt;Il existe entre autres des CMS basés sur Pyramid : notamment &lt;a class="reference external" href="http://substanced.net/"&gt;substanced&lt;/a&gt; (basé sur la ZODB) et &lt;a class="reference external" href="http://kotti.pylonsproject.org/"&gt;kotti&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Les slides de la présentation sont disponibles ici : &lt;a class="reference external" href="http://nantes.afpy.org/presentations/pyramid"&gt;Présentation de Pyramid&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generateurs-et-coroutines"&gt;
&lt;h2&gt;Générateurs et coroutines&lt;/h2&gt;
&lt;p&gt;Intervenant&amp;nbsp;: Hugo&lt;/p&gt;
&lt;div class="section" id="les-iterateurs-iterables"&gt;
&lt;h3&gt;Les itérateurs / iterables&lt;/h3&gt;
&lt;p&gt;Le concept d'itérable est simplement une généralisation du concept de séquence ou de liste. Un itérable est défini par le fait qu'il est possible d'itérer dessus, par exemple dans une boucle for ...
La syntaxe [] permet de définir ce qu'on appelle une liste &lt;em&gt;en compréhension&lt;/em&gt;. L'iterable est un concept pratique mais il a le défaut de stocker tous ses éléménts en mémoire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="les-generateurs"&gt;
&lt;h3&gt;Les générateurs&lt;/h3&gt;
&lt;p&gt;Un générateur est un itérable qui a la particularité de générer les résultats à la volée. Syntaxiquement une &lt;em&gt;expression génératrice&lt;/em&gt; peut s'écrire de la même manière qu'un itérable classique, en remplaçant les [] par des ().&lt;/p&gt;
&lt;p&gt;Dans un générateur, on utilise le mot clé &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; à la place de &lt;tt class="docutils literal"&gt;return&lt;/tt&gt;. La première différence est que l'appel de la fonction renverra non pas un résultat mais un générateur, sans que la fonction soit exécutée. La fonction est exécutée à partir du moment où on itère sur le générateur. Le premier appel à la méthode &lt;tt class="docutils literal"&gt;next&lt;/tt&gt; permet d'exécuter la fonction jusq'au premier &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;. À l'exécution du &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;, le générateur rend la main à la fonction appelante et s'arrête (mais l'état de son exécution est enregistré). Dans la fonction appelante, chaque appel de la méthode &lt;tt class="docutils literal"&gt;next&lt;/tt&gt; relance donc une exécution du générateur, de l'état où il s'était arrêté jusqu'au &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; suivant.&lt;/p&gt;
&lt;p&gt;Plusieurs intérêts notables :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;l'évaluation paresseuse limite l'allocation mémoire&lt;/li&gt;
&lt;li&gt;elle permet aussi de travailler avec une vision &amp;quot;flux de données&amp;quot; (en chainant plusieurs générateurs comme on chaine des commandes unix par exemple &lt;tt class="docutils literal"&gt;cat foo.txt | grep bar&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;possibilité de faire du pseudo-asynchrone de manière synchrone&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="les-co-routines"&gt;
&lt;h3&gt;Les co-routines&lt;/h3&gt;
&lt;p&gt;Une co-routine est à peu prêt la même chose qu'un générateur à la différence près qu'elle dispose d'une méthode supplémentaire &lt;tt class="docutils literal"&gt;send&lt;/tt&gt; qui permet à la fonction appelante d'envoyer des données à la co-routine. Cela permet d'influer sur son comportement depuis la fonction appelante.&lt;/p&gt;
&lt;p&gt;La vision est inversée : dans une chaine de co-routines, la fonction appelante pousse les données vers la fonction appelée. Il est aussi possible de diffuser des données à plusieurs co-routines.&lt;/p&gt;
&lt;p&gt;L'application principale des co-routines est de faire de la programmation pseudo-asynchrone tout en gardant une lisibilité proche du code synchrone classique. L'autre avantage est que la co-routine est &amp;quot;maitre&amp;quot; de son état et sait à quel endroit et dans quel état elle peut être interrompue et reprendre son exécution.&lt;/p&gt;
&lt;p&gt;Le mot clé &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt;, arrivé en Python 3, permet de faire de la &lt;em&gt;délégation de générateurs&lt;/em&gt;, c'est à dire de créer une sorte de tunnel bidirectionnel entre un générateur et un sous-générateur.&lt;/p&gt;
&lt;p&gt;Les slides de la présentation sont disponibles ici : &lt;a class="reference external" href="https://github.com/mhugo/pres_coroutines"&gt;Générateurs et co-routines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Merci à tous pour votre présence, on se retrouve au prochain barcamp le 24 mars !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="pyramid"></category><category term="générateur"></category><category term="co-routine"></category></entry><entry><title>Compte-rendu des conférences : Pélican et (i)Python</title><link href="http://nantes.afpy.org/compte-rendu-des-conferences-pelican-et-ipython.html" rel="alternate"></link><published>2014-12-04T00:00:00+01:00</published><updated>2014-12-04T00:00:00+01:00</updated><author><name>Pierre, Gordon, Florent</name></author><id>tag:nantes.afpy.org,2014-12-04:compte-rendu-des-conferences-pelican-et-ipython.html</id><summary type="html">&lt;p&gt;Un meetup tardif, dû à la PyConFr, centré sur deux présentations opposées en
termes de technicité&amp;nbsp;: une présentation d’un outil (presque) clés-en-mains, et
un survol des possibilités de iPython dans la dataviz cartographique, ainsi que
quelques bibliothèques utiles.&lt;/p&gt;
&lt;div class="section" id="pelican-le-futur-du-web-vintage"&gt;
&lt;h2&gt;Pelican&amp;nbsp;: le futur du web vintage&lt;/h2&gt;
&lt;p&gt;Intervenant&amp;nbsp;: Damien Nicolas, Gordon&lt;/p&gt;
&lt;div class="section" id="principe"&gt;
&lt;h3&gt;Principe&lt;/h3&gt;
&lt;p&gt;Pelican est un générateur de site statique écrit en Python initialement par Alexis Métaireau.&lt;/p&gt;
&lt;p&gt;Le site est réalisé via un langage de template ensuite traduit en HTML. Le contenu généré peut ensuite être déployé sur un serveur sans configuration supplémentaire. Il n’y a donc pas d’applicatif sur le serveur.&lt;/p&gt;
&lt;p&gt;Les avantages d’un tel système sont nombreux. D’abord la simplicité. Un simple éditeur de texte suffit pour écrire le contenu. Étant purement textuel, le contenu est facilement versionnable et recevoir/fournir un patch peut se résumer à un envoi de mail. L'absence d’applicatif côté serveur rend la configuration serveur aisée et la sécurité proche de la perfection : pas d’applicatif = pas de faille.&lt;/p&gt;
&lt;p&gt;Bon évidemment, il y a quelques inconvénients. En terme de fonctionnalité d’abord, l’absence native de recherche ou de commentaire. Mais heureusement, il est possible via des extensions de remédier à ces problèmes.
En revanche, la barrière à l’entrée est immuable. Pour faire du Pelican, il faut pouvoir écrire du RestructuredText ou du Markdown. Pour profiter pleinement de tout ça, il est bon de savoir invoquer une commande “make” ou “git push”. Plus que rébarbatif pour un néophyte.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="en-pratique"&gt;
&lt;h3&gt;En pratique&lt;/h3&gt;
&lt;p&gt;L’installation se fait comme n’importe quelle bibliothèque Python. On crée un environnement virtuel (e.g. via pyvenv en Python 3). On l’active et via pip on peut installer Pelican. A noter que par défaut, Pelican supporte uniquement le RestructuredText pour les articles, pour markdown, il faudra installer le paquet markdown en plus.
On peut ensuite préparer le site via l'installer de Pelican, qui de façon interactive pose quelques questions qui facilitent grandement la configuration. A cette étape, on paramètre notamment les différents moyens utiliser pour déployer le site web sur le serveur.&lt;/p&gt;
&lt;p&gt;Une fois configuré, on peut écrire des articles. Ces derniers pourront être placés dans un dossier &lt;strong&gt;articles&lt;/strong&gt; dans le dossier &lt;strong&gt;content&lt;/strong&gt; (tout ceci est paramétrable). Pour générer le site, le plus simple est d'utiliser la commande make :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
make html
&lt;/pre&gt;
&lt;p&gt;Et on déploie :&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
make upload
&lt;/pre&gt;
&lt;p&gt;Et la magie opère. Le site est redéployé !&lt;/p&gt;
&lt;p&gt;Il est assez facile de tester localement, Pelican permet d’utiliser un simple serveur HTTP en local pour vérifier ses modifications avant de publier des erreurs ;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extensions"&gt;
&lt;h3&gt;Extensions&lt;/h3&gt;
&lt;p&gt;On l’a écrit, nativement, il n’existe pas de gestion des commentaires
ni de fonction de recherche. Rien d’insurmontable cependant.&lt;/p&gt;
&lt;div class="section" id="commentaires"&gt;
&lt;h4&gt;Commentaires&lt;/h4&gt;
&lt;p&gt;Pour les commentaires, une solution simple est d’intégrer &lt;a class="reference external" href="https://github.com/Python-Nairobi/pelican-plugins/tree/master/disqus"&gt;Disqus&lt;/a&gt;. Disqus est un service permettant de stoquer des commentaires sur un autre serveur que celui de l’application. L’extension disqus_static permet d’utiliser l’API de ce service pour gérer les commentaires dans Pelican. Il y a d’autres alternatives, comme par exemple gérer des commentaires statiquement dans des fichiers sur le serveur hébergeant Pelican. Cette dernière solution permet d’éviter les dépendances à un service tiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recherche"&gt;
&lt;h4&gt;Recherche&lt;/h4&gt;
&lt;p&gt;Ici, on pourra fait appel à &lt;a class="reference external" href="http://www.tipue.com/search/"&gt;tipue_search&lt;/a&gt;, qui permet d’intégrer une fonctionnalité de recherche côté client. Sur le serveur, un fichier JSON est généré. Celui-ci est ensuite utilisé côté client pour de la recherche via JQuery. Le thème &lt;tt class="docutils literal"&gt;elegant&lt;/tt&gt; intègre cette fonctionnalité nativement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="autres-extensions"&gt;
&lt;h4&gt;Autres extensions&lt;/h4&gt;
&lt;p&gt;Très extensible, il est possible de faire tout un tas de choses avec Pelican. C’est d’ailleurs le moteur utilisé pour le blog que vous lisez en ce moment. Pour vous faire une idée des possibilités, c’est par là : &amp;lt;&lt;a class="reference external" href="https://github.com/Python-Nairobi/pelican-plugins"&gt;https://github.com/Python-Nairobi/pelican-plugins&lt;/a&gt;&amp;gt;`_.&lt;/p&gt;
&lt;p&gt;Les slides de la présentation sont disponibles ici&amp;nbsp;: &lt;a class="reference external" href="/presentations/pelican/pelican-meetup-python.pdf"&gt;Pelican&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dataviz-avec-ipython"&gt;
&lt;h2&gt;Dataviz avec iPython&lt;/h2&gt;
&lt;p&gt;Intervenant&amp;nbsp;: Thomas Gratier&lt;/p&gt;
&lt;p&gt;IPython est un shell Python interactif offrant autocomplétion et historique des commandes. Il peut également s’utiliser sous forme de notebook dans un navigateur. De nombreuses bibliothèques sont disponibles et peuvent être chargées dynamiquement. Ainsi, il est très aisé de préparer des présentations dynamiques avec démonstration Python en temps réel et image générée directement dans un navigateur. IPython permet aussi de déployer les notebooks sur un site web. C’est donc un outil très puissant à la fois pour expérimenter avec Python mais aussi pour préparer des présentations interactives.&lt;/p&gt;
&lt;p&gt;Pas plus de mots, lors du meetup, nous avons pu voir des résultats assez chouettes que vous invités à expérimenter par vous-même ici : &lt;a class="reference external" href="http://nantes.afpy.org/presentations/ipython_par_exemple/Ipython_par_l_exemple.html"&gt;Dataviz avec iPython&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Merci à tous pour votre présence et à très bientôt :) !&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="travis"></category><category term="ipython"></category><category term="dataviz"></category><category term="cartographie"></category></entry><entry><title>Barcamp estival du 29 juillet 2014</title><link href="http://nantes.afpy.org/barcamp-estival-du-29-juillet-2014.html" rel="alternate"></link><published>2014-07-31T00:00:00+02:00</published><updated>2014-07-31T00:00:00+02:00</updated><author><name>Georges Gouriten</name></author><id>tag:nantes.afpy.org,2014-07-31:barcamp-estival-du-29-juillet-2014.html</id><summary type="html">&lt;p&gt;Notre premier barcamp, animé par &lt;a class="reference external" href="https://netiru.fr"&gt;Georges&lt;/a&gt; nous
a permis d'aborder différents sujets en groupes de 3 à 5 personnes pendant 45
minutes environ.&lt;/p&gt;
&lt;p&gt;Les comptes-rendus sont ci-dessous, rendez-vous à la prochaine rencontre !&lt;/p&gt;
&lt;img alt="barcamp estival du 29 juillet 2014" src="/images/003-1.jpg" /&gt;
&lt;div class="section" id="outils-python-pour-les-adminsys-devops"&gt;
&lt;h2&gt;Outils Python pour les adminsys/devops&lt;/h2&gt;
&lt;p&gt;Participants : Florent, Antoine et Pablo&lt;/p&gt;
&lt;p&gt;Rapporteur : Pablo&lt;/p&gt;
&lt;p&gt;L'idée était de discuter des outils Python disponibles pour les adminsys.&lt;/p&gt;
&lt;p&gt;Les point abordés étaient :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Les outils pour disponibles pour le déploiement/provisioning, comme Fabric
&lt;a class="reference external" href="http://www.fabfile.org/"&gt;http://www.fabfile.org/&lt;/a&gt;, Ansible &lt;a class="reference external" href="http://www.ansible.com/home"&gt;http://www.ansible.com/home&lt;/a&gt; ou Saltstack
&lt;a class="reference external" href="http://www.saltstack.com/"&gt;http://www.saltstack.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Les nouvelles façons de travailler entre développeurs et administrateurs
systèmes, Antoine nous a raconté son expérience avec Fabric et Puppet (Ruby)
chez Wikipedia, nous avons évoqué la problématique du stockage/versioning de
donnés sensibles et partagées dans une même équipe&lt;/li&gt;
&lt;li&gt;Les outils de monitoring comme Graphite &lt;a class="reference external" href="http://graphite.wikidot.com/"&gt;http://graphite.wikidot.com/&lt;/a&gt; et
ElasticSearch/Logstash/Kibana (Java) pour les métriques des apps/activités&lt;/li&gt;
&lt;li&gt;L'utilisation de Sentry &lt;a class="reference external" href="https://getsentry.com/"&gt;https://getsentry.com/&lt;/a&gt; pour le tracking des
erreurs/exception dans une application Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour résumer, la discussion a été ouverte et variée. De plus, c'était la
première fois que nous nous rencontrions et les échanges ont permis de mieux
connaître l'intérêt et l'expérience de chacun sur le sujet, le tout dans une
très bonne ambiance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django"&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;p&gt;Participants : Mathieu F., ?, ?, ?&lt;/p&gt;
&lt;p&gt;Rapporteur : Mathieu F.&lt;/p&gt;
&lt;p&gt;Nous avons évoqué les serveurs web et leurs modes &amp;quot;FastCGI&amp;quot; et WSGI&amp;quot;.&lt;/p&gt;
&lt;p&gt;FastCGI :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://fr.wikipedia.org/wiki/FastCGI"&gt;http://fr.wikipedia.org/wiki/FastCGI&lt;/a&gt; (voir aussi les liens vers les
implémentations / modules pour Apache / Lighttpd / Nginx / Cherokee)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WSGI :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://fr.wikipedia.org/wiki/WSGI"&gt;http://fr.wikipedia.org/wiki/WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wsgi.readthedocs.org/en/latest/what.html"&gt;http://wsgi.readthedocs.org/en/latest/what.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/modwsgi/"&gt;https://code.google.com/p/modwsgi/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nous avons ensuite rapidement parlé de Gunicorn (&lt;a class="reference external" href="http://gunicorn.org/"&gt;http://gunicorn.org/&lt;/a&gt;), un
serveur web conçu pour Python et WSGI.&lt;/p&gt;
&lt;p&gt;Puis Django :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;framework de développement web&lt;/li&gt;
&lt;li&gt;permet d'architecturer le code selon le modèle MVC&lt;/li&gt;
&lt;li&gt;permet de définir une liste d'URL (exemple pour &amp;quot;www.monsite.fr&amp;quot; : /login,
/blog, /admin, /voirArticle et d'associer une action / un script à chacune
(ce que Symfony appelle des routes, dans le monde PHP ;-)&lt;/li&gt;
&lt;li&gt;fournit une commande shell &amp;quot;manage.py&amp;quot; permet des actions de debug,
initialisation, lancement du serveur web en local, etc&lt;/li&gt;
&lt;li&gt;Django permet de créer un back office très light (CRUD) de manière presque
automatique&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Les &amp;quot;virtualenv&amp;quot; :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;permettent de faire cohabiter des logiciels écrits en Python ayant des
prérequis différents. Par exemple : le logiciel &amp;quot;Toto&amp;quot; requiert la lib &amp;quot;libA&amp;quot;
en version 12, alors que le logiciel &amp;quot;Truc&amp;quot; requiert la lib &amp;quot;libA&amp;quot; en version
10&lt;/li&gt;
&lt;li&gt;sont utiles (indispensables !) à la fois en environnement de dév et en prod&lt;/li&gt;
&lt;li&gt;voir commandes &amp;quot;virtualenv&amp;quot;, &amp;quot;virtualenvwrapper&amp;quot; et &amp;quot;venv&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Déploiement d'applis Django :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;peut se faire avec des outils maison ou des outils dédiés tels que Fabric
(&lt;a class="reference external" href="http://www.fabfile.org/"&gt;http://www.fabfile.org/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hébergement :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a priori, peu d'hébergement mutualisé pour Python (loin de l'offre de PHP)&lt;/li&gt;
&lt;li&gt;quelques hébergeurs :&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.alwaysdata.com/"&gt;https://www.alwaysdata.com/&lt;/a&gt; (propose du mutualisé avec Python en
gratuit), support technique réacti (joignable via IRC)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.heroku.com/"&gt;https://www.heroku.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aws.amazon.com/fr/"&gt;http://aws.amazon.com/fr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Python 2.7 ou Python 3.x ? (troll inside ;-)&lt;/dt&gt;
&lt;dd&gt;==&amp;gt; A ce jour, la seule raison de commencer un développement en 2.7 plutôt
qu'en 3.x serait d'avoir un besoin impératif d'une lib non dispo en Python 3
(et dont le portage n'est pas envisagé). De très nombreuses libs ont été
mises à jour, donc ce cas de figure devrait se raréfier.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Depuis la version 1.6, Django (&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;https://www.djangoproject.com/&lt;/a&gt;) supporte Python
3.&lt;/p&gt;
&lt;p&gt;Pour terminer, un petit lien vers un blog TRES intéressant sur Python (mais
pas que ;-) :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sam &amp;amp; Max: Python, Django, Git et du cul (ouioui, vous avez bien lu ;-) :
&lt;a class="reference external" href="http://sametmax.com/"&gt;http://sametmax.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bonnes-pratiques-et-outils-python"&gt;
&lt;h2&gt;Bonnes pratiques et outils python&lt;/h2&gt;
&lt;p&gt;Participants : Reine, Nicolas, Yoann&lt;/p&gt;
&lt;p&gt;Rapporteur : Yoann&lt;/p&gt;
&lt;p&gt;Tout d'abord, nous avons discuté de maisons d'édition chez qui paraissent des
livres intéressants pour de la doc ou de l'outillage (Python/Linux mais pas
que) : Packt, O'Reilly, Apress, No starch press. Nous avons aussi parlé de
sites plus orientés Linux : TLLTS (The Linux Link Tech Show:podcasts sur
youtube), Linux Luddites, distrowatch.&lt;/p&gt;
&lt;p&gt;Ensuite, nous avons abordé la démarche générale à suivre dans les projets pour
en venir plus particulièrement à l'outillage : en fonction des besoins du
projet on choisit les technologies, puis vient le choix des outils. Avec
Python, la référence permet généralement comprendre rapidement comment
utiliser les librairies.&lt;/p&gt;
&lt;p&gt;Enfin, nous avons parlé des virtualenv qui permettent d'avoir plusieurs
environnements bien séparés sur une machine physique (et donc de disposer de
différentes versions des librairies, voire de Python) ainsi que les
importer/exporter grâce à pip, par l'intermédiaire d'un fichier listant les
dépendances du projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="regards-croises-sur-des-projets-python"&gt;
&lt;h2&gt;Regards croisés sur des projets python&lt;/h2&gt;
&lt;p&gt;Participants : Jean D., Georges G., Jean-Baptiste, ?&lt;/p&gt;
&lt;p&gt;Rapporteur : Jean D.&lt;/p&gt;
&lt;p&gt;Python est recherché pour simplifier et debugger des développements existants.
D'un accès facile sur le Web, il est également rapide d'apprentissage. Il
permet de réduire la taille d'un développement classique. L'ordre de grandeur
de cette réduction peut-être de 75 % du temps.  Ceci grâce à 2 atouts
principaux : son &amp;quot;moteur&amp;quot; performant ses nombreuses fonctionnalités.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="fabric"></category><category term="ansible"></category><category term="salt"></category><category term="barcamp"></category></entry><entry><title>Rencontre et key signing party 24 mai 2014</title><link href="http://nantes.afpy.org/rencontre-et-key-signing-party-24-mai-2014.html" rel="alternate"></link><published>2014-07-31T00:00:00+02:00</published><updated>2014-07-31T00:00:00+02:00</updated><author><name>Florent Lebreton</name></author><id>tag:nantes.afpy.org,2014-07-31:rencontre-et-key-signing-party-24-mai-2014.html</id><summary type="html">&lt;p&gt;Après le meetup-pilote qui nous a permis de découvrir GrapheekDB, cette rencontre avait pour principal objectif de faire connaissance et préparer les prochains évènements.&lt;/p&gt;
&lt;p&gt;Il en est sortie l'idée d'organiser un meetup par mois en alternant conférences et barcamps.&lt;/p&gt;
&lt;p&gt;Quelques sujets potentiels de présentations ont déjà émergés :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Initiation à Python ou comment écrire du code pythonesque pour ceux qui viennent d'autres langages&lt;/li&gt;
&lt;li&gt;Retour d'expérience sur migration vers Python3&lt;/li&gt;
&lt;li&gt;Python legacy avec Zope, Grok, etc.&lt;/li&gt;
&lt;li&gt;Demo d'IPython Notebook avec un peu de dataviz&lt;/li&gt;
&lt;li&gt;Programmation un Raspberry PI avec Python&lt;/li&gt;
&lt;li&gt;Présentation/Introduction à Django&lt;/li&gt;
&lt;li&gt;Retour d'expérience sur apps Django et bibliothèques sympas&lt;/li&gt;
&lt;li&gt;Sites et blogs statiques avec Pelican&lt;/li&gt;
&lt;li&gt;Générateurs et co-routines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La &lt;a class="reference external" href="http://fr.wikipedia.org/wiki/Key_signing_party"&gt;key signing party&lt;/a&gt; organisée par &lt;a class="reference external" href="https://twitter.com/pabluk"&gt;Pablo&lt;/a&gt; a permis d'animer la suite du meetup, en attendant la bière !&lt;/p&gt;
&lt;img alt="rencontre et key signing party" src="/images/002-1.png" /&gt;
&lt;p&gt;À bientôt, et en attendant ... respectez la PEP8 :)&lt;/p&gt;
</summary><category term="python"></category><category term="pgp"></category></entry><entry><title>Retour sur le meetup du 09 avril 2014</title><link href="http://nantes.afpy.org/retour-sur-le-meetup-du-09-avril-2014.html" rel="alternate"></link><published>2014-07-30T00:00:00+02:00</published><updated>2014-07-30T00:00:00+02:00</updated><author><name>Florent Lebreton</name></author><id>tag:nantes.afpy.org,2014-07-30:retour-sur-le-meetup-du-09-avril-2014.html</id><summary type="html">&lt;p&gt;Lors de ce premier meetup Python, où plus d'une vingtaine de personnes étaient présentes, Raphaël Braud nous a présenté &lt;a class="reference external" href="https://bitbucket.org/nidusfr/grapheekdb"&gt;GrapheekDB&lt;/a&gt;, une base de données de graphe libre !&lt;/p&gt;
&lt;p&gt;Ce premier rendez-vous était surtout l'occasion de nous rencontrer et de discuter de l'organisation de nos prochaines rassemblements.&lt;/p&gt;
&lt;p&gt;À bientôt, et en attendant ... respectez la PEP8 :)&lt;/p&gt;
</summary><category term="grapheekdb"></category></entry></feed>